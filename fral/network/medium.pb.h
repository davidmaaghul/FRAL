// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: medium.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_medium_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_medium_2eproto

#include <google/protobuf/port_def.inc>
#include <limits>
#include <string>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>

#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_medium_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_medium_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_medium_2eproto;
namespace medium {
class Allocation;
struct AllocationDefaultTypeInternal;
extern AllocationDefaultTypeInternal _Allocation_default_instance_;
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Start;
struct StartDefaultTypeInternal;
extern StartDefaultTypeInternal _Start_default_instance_;
}  // namespace medium
PROTOBUF_NAMESPACE_OPEN
template <>
::medium::Allocation* Arena::CreateMaybeMessage<::medium::Allocation>(Arena*);
template <>
::medium::Empty* Arena::CreateMaybeMessage<::medium::Empty>(Arena*);
template <>
::medium::Start* Arena::CreateMaybeMessage<::medium::Start>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace medium {

// ===================================================================

class Start final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:medium.Start)
                                                             */
{
 public:
  inline Start() : Start(nullptr) {}
  ~Start() override;
  explicit PROTOBUF_CONSTEXPR Start(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Start(const Start& from);
  Start(Start&& from) noexcept : Start() { *this = ::std::move(from); }

  inline Start& operator=(const Start& from) {
    CopyFrom(from);
    return *this;
  }
  inline Start& operator=(Start&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Start& default_instance() {
    return *internal_default_instance();
  }
  static inline const Start* internal_default_instance() {
    return reinterpret_cast<const Start*>(&_Start_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Start& a, Start& b) { a.Swap(&b); }
  inline void Swap(Start* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Start* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Start* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Start>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Start& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Start& from) { Start::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

 public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Start* other);

 private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "medium.Start";
  }

 protected:
  explicit Start(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                 bool is_message_owned = false);

 public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdxFieldNumber = 1,
  };
  // int32 idx = 1;
  void clear_idx();
  int32_t idx() const;
  void set_idx(int32_t value);

 private:
  int32_t _internal_idx() const;
  void _internal_set_idx(int32_t value);

 public:
  // @@protoc_insertion_point(class_scope:medium.Start)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t idx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_medium_2eproto;
};
// -------------------------------------------------------------------

class Allocation final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:medium.Allocation)
                                                                  */
{
 public:
  inline Allocation() : Allocation(nullptr) {}
  ~Allocation() override;
  explicit PROTOBUF_CONSTEXPR Allocation(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Allocation(const Allocation& from);
  Allocation(Allocation&& from) noexcept : Allocation() {
    *this = ::std::move(from);
  }

  inline Allocation& operator=(const Allocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Allocation& operator=(Allocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Allocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Allocation* internal_default_instance() {
    return reinterpret_cast<const Allocation*>(&_Allocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(Allocation& a, Allocation& b) { a.Swap(&b); }
  inline void Swap(Allocation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Allocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Allocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Allocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Allocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Allocation& from) { Allocation::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

 public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Allocation* other);

 private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "medium.Allocation";
  }

 protected:
  explicit Allocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                      bool is_message_owned = false);

 public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllocationFieldNumber = 2,
  };
  // bytes allocation = 2;
  void clear_allocation();
  const std::string& allocation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_allocation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_allocation();
  PROTOBUF_NODISCARD std::string* release_allocation();
  void set_allocated_allocation(std::string* allocation);

 private:
  const std::string& _internal_allocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_allocation(
      const std::string& value);
  std::string* _internal_mutable_allocation();

 public:
  // @@protoc_insertion_point(class_scope:medium.Allocation)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr allocation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_medium_2eproto;
};
// -------------------------------------------------------------------

class Empty final
    : public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:medium.Empty)
                                                                */
{
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept : Empty() { *this = ::std::move(from); }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(&_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

 public:
 private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "medium.Empty";
  }

 protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                 bool is_message_owned = false);

 public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:medium.Empty)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {};
  friend struct ::TableStruct_medium_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Start

// int32 idx = 1;
inline void Start::clear_idx() { _impl_.idx_ = 0; }
inline int32_t Start::_internal_idx() const { return _impl_.idx_; }
inline int32_t Start::idx() const {
  // @@protoc_insertion_point(field_get:medium.Start.idx)
  return _internal_idx();
}
inline void Start::_internal_set_idx(int32_t value) { _impl_.idx_ = value; }
inline void Start::set_idx(int32_t value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:medium.Start.idx)
}

// -------------------------------------------------------------------

// Allocation

// bytes allocation = 2;
inline void Allocation::clear_allocation() {
  _impl_.allocation_.ClearToEmpty();
}
inline const std::string& Allocation::allocation() const {
  // @@protoc_insertion_point(field_get:medium.Allocation.allocation)
  return _internal_allocation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Allocation::set_allocation(ArgT0&& arg0,
                                                              ArgT... args) {
  _impl_.allocation_.SetBytes(static_cast<ArgT0&&>(arg0), args...,
                              GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:medium.Allocation.allocation)
}
inline std::string* Allocation::mutable_allocation() {
  std::string* _s = _internal_mutable_allocation();
  // @@protoc_insertion_point(field_mutable:medium.Allocation.allocation)
  return _s;
}
inline const std::string& Allocation::_internal_allocation() const {
  return _impl_.allocation_.Get();
}
inline void Allocation::_internal_set_allocation(const std::string& value) {
  _impl_.allocation_.Set(value, GetArenaForAllocation());
}
inline std::string* Allocation::_internal_mutable_allocation() {
  return _impl_.allocation_.Mutable(GetArenaForAllocation());
}
inline std::string* Allocation::release_allocation() {
  // @@protoc_insertion_point(field_release:medium.Allocation.allocation)
  return _impl_.allocation_.Release();
}
inline void Allocation::set_allocated_allocation(std::string* allocation) {
  if (allocation != nullptr) {
  } else {
  }
  _impl_.allocation_.SetAllocated(allocation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.allocation_.IsDefault()) {
    _impl_.allocation_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:medium.Allocation.allocation)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace medium

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_medium_2eproto
