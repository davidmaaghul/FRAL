// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: medium.proto

#include "medium.pb.h"
#include "medium.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace medium {

static const char* Medium_method_names[] = {
  "/medium.Medium/connect",
  "/medium.Medium/sync",
  "/medium.Medium/shutdown",
};

std::unique_ptr< Medium::Stub> Medium::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Medium::Stub> stub(new Medium::Stub(channel, options));
  return stub;
}

Medium::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_connect_(Medium_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sync_(Medium_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_shutdown_(Medium_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Medium::Stub::connect(::grpc::ClientContext* context, const ::medium::Empty& request, ::medium::Start* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medium::Empty, ::medium::Start, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_connect_, context, request, response);
}

void Medium::Stub::async::connect(::grpc::ClientContext* context, const ::medium::Empty* request, ::medium::Start* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medium::Empty, ::medium::Start, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, std::move(f));
}

void Medium::Stub::async::connect(::grpc::ClientContext* context, const ::medium::Empty* request, ::medium::Start* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medium::Start>* Medium::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::medium::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medium::Start, ::medium::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_connect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medium::Start>* Medium::Stub::AsyncconnectRaw(::grpc::ClientContext* context, const ::medium::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncconnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::medium::Allocation>* Medium::Stub::syncRaw(::grpc::ClientContext* context, ::medium::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::medium::Allocation>::Create(channel_.get(), rpcmethod_sync_, context, response);
}

void Medium::Stub::async::sync(::grpc::ClientContext* context, ::medium::Empty* response, ::grpc::ClientWriteReactor< ::medium::Allocation>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::medium::Allocation>::Create(stub_->channel_.get(), stub_->rpcmethod_sync_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::medium::Allocation>* Medium::Stub::AsyncsyncRaw(::grpc::ClientContext* context, ::medium::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medium::Allocation>::Create(channel_.get(), cq, rpcmethod_sync_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::medium::Allocation>* Medium::Stub::PrepareAsyncsyncRaw(::grpc::ClientContext* context, ::medium::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::medium::Allocation>::Create(channel_.get(), cq, rpcmethod_sync_, context, response, false, nullptr);
}

::grpc::Status Medium::Stub::shutdown(::grpc::ClientContext* context, const ::medium::Empty& request, ::medium::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::medium::Empty, ::medium::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_shutdown_, context, request, response);
}

void Medium::Stub::async::shutdown(::grpc::ClientContext* context, const ::medium::Empty* request, ::medium::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::medium::Empty, ::medium::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, std::move(f));
}

void Medium::Stub::async::shutdown(::grpc::ClientContext* context, const ::medium::Empty* request, ::medium::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::medium::Empty>* Medium::Stub::PrepareAsyncshutdownRaw(::grpc::ClientContext* context, const ::medium::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::medium::Empty, ::medium::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_shutdown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::medium::Empty>* Medium::Stub::AsyncshutdownRaw(::grpc::ClientContext* context, const ::medium::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshutdownRaw(context, request, cq);
  result->StartCall();
  return result;
}

Medium::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medium_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medium::Service, ::medium::Empty, ::medium::Start, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medium::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medium::Empty* req,
             ::medium::Start* resp) {
               return service->connect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medium_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Medium::Service, ::medium::Allocation, ::medium::Empty>(
          [](Medium::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::medium::Allocation>* reader,
             ::medium::Empty* resp) {
               return service->sync(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Medium_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Medium::Service, ::medium::Empty, ::medium::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Medium::Service* service,
             ::grpc::ServerContext* ctx,
             const ::medium::Empty* req,
             ::medium::Empty* resp) {
               return service->shutdown(ctx, req, resp);
             }, this)));
}

Medium::Service::~Service() {
}

::grpc::Status Medium::Service::connect(::grpc::ServerContext* context, const ::medium::Empty* request, ::medium::Start* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medium::Service::sync(::grpc::ServerContext* context, ::grpc::ServerReader< ::medium::Allocation>* reader, ::medium::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Medium::Service::shutdown(::grpc::ServerContext* context, const ::medium::Empty* request, ::medium::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace medium

